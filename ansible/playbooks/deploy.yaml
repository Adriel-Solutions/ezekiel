- name: Deploy
  hosts: all
  become: true
  become_user: adriel
  become_method: su

  tasks:
    - ping: ~

    - name: Create database
      postgresql_db:
        name: "project"
        state: present
      become: true
      become_user: postgres

    - name: Create database user ezekiel
      postgresql_user:
        name: ezekiel
        password: ezekiel
        state: present
      become: true
      become_user: postgres

    - name: Grant access to the database for ezekiel
      postgresql_privs:
        type: database
        database: project
        roles: ezekiel
        grant_option: no
        privs: all
      become: true
      become_user: postgres

    - name: Allow md5 connection for the user ezekiel
      postgresql_pg_hba:
        dest: "~/pg_hba.conf"
        contype: local
        databases: project
        method: md5
        users: ezekiel
        create: true
      become: true
      become_user: postgres

    - name: Restart Postgres
      service:
        name: postgresql
        state: restarted
      become: true
      become_user: root

    - name: Save setup init script remotely
      template:
        src: "{{ playbook_dir }}/../templates/postgres/db.sql"
        dest: "~/db.sql"
      become: true
      become_user: postgres

    - name: Create remote deployment dir structure
      file:
        path: "{{ item }}"
        state: directory
      with_items:
        - /var/www/html/app
        - /var/www/html/app/current
        - /var/www/html/app/versions
        - /var/www/html/app/shared

    - name: Determine whether repository must be created locally
      become: false
      delegate_to: localhost
      stat:
        path: "{{ playbook_dir }}/../../.git"
      register: git_result

    - name: Setup git if not already
      become: false
      command: "{{ item }}"
      args:
        chdir: "{{ playbook_dir }}/../../"
      with_items:
        - git init
        - git remote add origin "{{ git_repository_url }}"
        - git add .
        - git commit -m "Initial deployment"
        - git push -u origin master
      delegate_to: localhost
      when: not git_result.stat.exists

    - name: Determine whether code is pushed already
      become: false
      command: git diff --exit-code
      delegate_to: localhost
      args:
        chdir: "{{ playbook_dir }}/../../"
      register: need_to_push
      failed_when: need_to_push.rc != 1 and need_to_push.rc != 0

    - name: Push local code to git repo
      become: false
      command: "{{ item }}"
      delegate_to: localhost
      args:
        chdir: "{{ playbook_dir }}/../../"
      with_items:
        - git add .
        - git commit -m "Initial deployment"
        - git push -u origin master
      when:
        - need_to_push.rc != 0

    - name: Pull code remotely from Github
      git:
        repo: "{{ git_repository_url }}"
        dest: /var/www/html/app/current
        update: yes
        force: yes
        version: master

    - name: Run database setup SQL script
      community.postgresql.postgresql_script:
        db: project
        path: "~/db.sql"
      become: true
      become_user: postgres

    - name: Create shared folders
      file:
        path: "/var/www/html/app/shared/{{ item }}/"
        state: directory
      with_items:
        - dependencies
        - storage

    - name: Remove useless directories for runtime + Shared directories
      file:
        path: "/var/www/html/app/current/{{ item }}"
        state: absent
      with_items:
        - ansible
        - docker
        - docker-compose.dev.yml
        - dependencies
        - storage

    - name: Link shared folders
      file:
        src: "/var/www/html/app/shared/{{ item }}/"
        dest: "/var/www/html/app/current/{{ item }}"
        state: link
      with_items:
        - dependencies
        - storage

    - name: Recreate storage structure
      file:
        path: "/var/www/html/app/shared/storage/{{ item }}"
        state: directory
      with_items:
        - logs
        - uploads

    - name: Recreate logs structure
      file:
        path: "/var/www/html/app/shared/storage/logs/{{ item }}"
        state: directory
      with_items:
        - nginx
        - php
        - app

    - name: Recreate uploads structure
      file:
        path: "/var/www/html/app/shared/storage/uploads"
        state: directory

    # Todo : Fix permissions / owner
    - name: Set proper permissions for PHP logs
      file:
        path: "{{ item }}"
        mode: "777"
        state: directory
      with_items:
        - "/var/www/html/app/shared/storage"
        - "/var/www/html/app/shared/storage/logs"
        - "/var/www/html/app/shared/storage/logs/php"

    # Todo : Fix permissions / owner
    - name: Set proper permissions for PHP uploads
      file:
        path: "/var/www/html/app/shared/storage/uploads"
        mode: "777"
        state: directory

    - name: Install dependencies
      command: composer install
      args:
        chdir: /var/www/html/app/current/

    - name: Setup Ezekiel CLI alias
      lineinfile:
        path: /home/adriel/.bashrc
        line: "alias ezekiel='./ezekiel'"
        owner: adriel
        regexp: "^alias ezekiel='./ezekiel'$"
        insertafter: EOF
        create: True
        state: present

    - name: Upload dotenv configuration for production
      copy:
        src: "{{ playbook_dir }}/../../configuration/.production.env"
        dest: /var/www/html/app/current/configuration/.custom.env
      tags: conf

    - name: Run migrations
      command: ./ezekiel run:migrations
      args:
        chdir: /var/www/html/app/current
